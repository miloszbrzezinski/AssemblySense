// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Profile {
  id       String @id @default(uuid())
  userId   String @unique
  name     String
  lastName String
  imageUrl String @db.Text
  email    String @db.Text

  workspaces        Workspace[]
  members           Member[]
  favouriteProjects Project[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Workspace {
  id         String @id @default(uuid())
  name       String
  imageUrl   String @db.Text
  inviteCode String @unique

  profileId String
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  members             Member[]
  projects            Project[]
  customers           Customer[]
  componentCategories ComponentCategory[]
  departments         Department[]

  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  OrganizationNode OrganizationNode[]

  @@index([profileId])
}

enum MemberRole {
  ADMIN
  MODERATOR
  GUEST
}

model Member {
  id   String     @id @default(uuid())
  role MemberRole @default(GUEST)

  projectMembers ProjectMember[]

  profileId String
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  organizationNodeId String?
  organizationNode   OrganizationNode? @relation(fields: [organizationNodeId], references: [id], onDelete: Cascade)

  departmentId String?
  department   Department? @relation(fields: [departmentId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
  @@index([workspaceId])
  @@index([departmentId])
  @@index([organizationNodeId])
}

model Department {
  id   String @id @default(uuid())
  name String

  members Member[]

  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  organizationNodeId String?
  organizationNode   OrganizationNode? @relation(fields: [organizationNodeId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([workspaceId])
  @@index([organizationNodeId])
}

model OrganizationNode {
  id   String @id @default(uuid())
  name String

  organizationNodes OrganizationNode[] @relation("organizationChildred")
  members           Member[]
  departments       Department[]

  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  organizationNodeId String?
  organizationNode   OrganizationNode? @relation("organizationChildred", fields: [organizationNodeId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([workspaceId])
  @@index([organizationNodeId])
}

model Project {
  id          String @id @default(uuid())
  projectNo   String
  name        String
  description String @db.Text

  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  customerId String
  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)

  projectStages ProjectStage[]

  assemblyGroups    AssemblyGroup[]
  projectMembers    ProjectMember[]
  projectComponents ProjectComponent[]
  projectNetworks   ProjectNetwork[]
  projectTargets    ProjectTarget[]
  projectIssues     ProjectIssue[]

  profileFavourite Profile[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([workspaceId])
  @@index([customerId])
}

model ProjectMember {
  id       String  @id @default(uuid())
  isLeader Boolean @default(false)

  workspaceMemberId String
  workspaceMember   Member @relation(fields: [workspaceMemberId], references: [id], onDelete: Cascade)

  workingHours WorkingHours[]

  projectIssueApplications ProjectIssue[] @relation("reported")
  projectIssueSolved       ProjectIssue[] @relation("solvedBy")

  projectIssueComments ProjectIssueComment[]

  projectId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([workspaceMemberId])
}

model WorkingHours {
  id          String   @id @default(uuid())
  value       Int
  description String   @db.Text
  date        DateTime @default(now())

  projectMemberId String
  projectMember   ProjectMember @relation(fields: [projectMemberId], references: [id], onDelete: Cascade)

  assemblyGroupId String?
  assemblyGroup   AssemblyGroup? @relation(fields: [assemblyGroupId], references: [id], onDelete: Cascade)

  processId String?
  process   AssemblyProcess? @relation(fields: [processId], references: [id], onDelete: Cascade)

  // project components
  targetId String?
  target   ProjectTarget? @relation(fields: [targetId], references: [id], onDelete: Cascade)

  componentId String?
  component   ProjectComponent? @relation(fields: [componentId], references: [id], onDelete: Cascade)

  sequenceId String?
  sequence   Sequence? @relation(fields: [sequenceId], references: [id], onDelete: Cascade)

  projectIssueId String?
  projectIssue   ProjectIssue? @relation(fields: [projectIssueId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProjectTarget {
  id                String            @id @default(uuid())
  name              String            @db.Text
  description       String            @db.Text
  target            String            @db.Text
  projectTargetType ProjectTargetType @default(GENERAL)

  workingHours  WorkingHours[]
  projectIssues ProjectIssue[]

  projectId String
  Project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([projectId])
}

enum ProjectTargetType {
  GENERAL
  TIME
  WORKING_TIME
  DATE
}

model ProjectStage {
  id          String  @id @default(uuid())
  name        String  @db.Text
  description String  @db.Text
  order       Int
  active      Boolean @default(false)

  startDate DateTime?
  deadline  DateTime?

  projectId String
  Project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProjectIssue {
  id           String         @id @default(uuid())
  name         String         @db.Text
  description  String         @db.Text
  priority     Int            @default(1)
  workingHours WorkingHours[]

  solved     Boolean        @default(false)
  solution   String?        @db.Text
  solvedById String?
  solvedBy   ProjectMember? @relation("solvedBy", fields: [solvedById], references: [id], onDelete: Cascade)

  applicantId String
  applicant   ProjectMember @relation("reported", fields: [applicantId], references: [id], onDelete: Cascade)

  projectId String
  Project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  assemblyGroupId String?
  assemblyGroup   AssemblyGroup? @relation(fields: [assemblyGroupId], references: [id], onDelete: Cascade)

  processId String?
  process   AssemblyProcess? @relation(fields: [processId], references: [id], onDelete: Cascade)

  projectIssueComments ProjectIssueComment[]

  // project components
  targetId String?
  target   ProjectTarget? @relation(fields: [targetId], references: [id], onDelete: Cascade)

  componentId String?
  component   ProjectComponent? @relation(fields: [componentId], references: [id], onDelete: Cascade)

  componentEventId String?
  componentEvent   ComponentEvent? @relation(fields: [componentEventId], references: [id], onDelete: Cascade)

  addressIOId String?
  AddressIO   AddressIO? @relation(fields: [addressIOId], references: [id], onDelete: Cascade)

  sequenceId String?
  sequence   Sequence? @relation(fields: [sequenceId], references: [id], onDelete: Cascade)

  sequenceStepId String?
  sequenceStep   SequenceStep? @relation(fields: [sequenceStepId], references: [id], onDelete: Cascade)

  networkId String?
  network   ProjectNetwork? @relation(fields: [networkId], references: [id], onDelete: Cascade)

  connectionId String?
  connection   ComponentConnection? @relation(fields: [connectionId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([applicantId])
  @@index([projectId])
}

model ProjectIssueComment {
  id      String @id @default(uuid())
  content String @db.Text

  projectIssueId String
  projectIssue   ProjectIssue @relation(fields: [projectIssueId], references: [id], onDelete: Cascade)

  projectMemberId String
  projectMember   ProjectMember @relation(fields: [projectMemberId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Customer {
  id          String @id @default(uuid())
  name        String
  description String @db.Text

  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  projects Project[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([workspaceId])
}

model ComponentCategory {
  id   String @id @default(uuid())
  name String

  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  components Component[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([workspaceId])
}

model Component {
  id           String @id @default(uuid())
  manufacturer String
  name         String

  categoryId String
  category   ComponentCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  projectComponents ProjectComponent[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([categoryId])
}

model ProjectComponent {
  id          String  @id @default(uuid())
  name        String
  description String? @db.Text
  status      String

  componentEvents      ComponentEvent[]
  componentConnections ComponentConnection[]

  workingHours  WorkingHours[]
  projectIssues ProjectIssue[]

  projectId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  componentId String
  component   Component @relation(fields: [componentId], references: [id], onDelete: Cascade)

  assemblyGroupId String?
  assemblyGroup   AssemblyGroup? @relation(fields: [assemblyGroupId], references: [id], onDelete: Cascade)

  assemblyProcessId String?
  assemblyProcess   AssemblyProcess? @relation(fields: [assemblyProcessId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([projectId])
  @@index([componentId])
  @@index([assemblyGroupId])
  @@index([assemblyProcessId])
}

enum EventType {
  STATUS
  ACTION
}

model AddressIO {
  id         String @id @default(uuid())
  symbol     String
  byteAdress String
  bitAdress  String

  componentEventId String          @unique
  componentEvent   ComponentEvent? @relation(fields: [componentEventId], references: [id], onDelete: Cascade)

  projectIssues ProjectIssue[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([componentEventId])
}

model ComponentEvent {
  id          String    @id @default(uuid())
  name        String
  description String?   @db.Text
  eventType   EventType @default(STATUS)

  eventEnableFormula String  @db.Text
  eventEnableComment String? @db.Text

  sequenceSteps SequenceStep[]

  addressIO AddressIO?

  projectIssues ProjectIssue[]

  projectComponentId String
  projectComponent   ProjectComponent @relation(fields: [projectComponentId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([projectComponentId])
}

model Sequence {
  id          String  @id @default(uuid())
  name        String
  description String? @db.Text

  sequenceStep SequenceStep[]

  assemblyProcessId String
  assemblyProcess   AssemblyProcess @relation(fields: [assemblyProcessId], references: [id], onDelete: Cascade)

  workingHours  WorkingHours[]
  projectIssues ProjectIssue[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([assemblyProcessId])
}

model SequenceStep {
  id          String  @id @default(uuid())
  name        String
  description String? @db.Text

  stepNextReqFormula String @db.Text

  componentsEvents ComponentEvent[]

  sequencepId String
  sequence    Sequence @relation(fields: [sequencepId], references: [id], onDelete: Cascade)

  projectIssues ProjectIssue[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([sequencepId])
}

model ProjectNetwork {
  id             String  @id @default(uuid())
  name           String
  subnetMask     String
  networkPortion String
  description    String? @db.Text

  componentConnections ComponentConnection[]

  projectId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  assemblyGroupId String?
  assemblyGroup   AssemblyGroup? @relation(fields: [assemblyGroupId], references: [id], onDelete: Cascade)

  projectIssues ProjectIssue[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([projectId])
  @@index([assemblyGroupId])
}

model ComponentConnection {
  id          String  @id @default(uuid())
  name        String
  hostPortion String
  description String? @db.Text

  projectComponentId String
  projectComponent   ProjectComponent @relation(fields: [projectComponentId], references: [id], onDelete: Cascade)

  projectNetworkId String
  projectNetwork   ProjectNetwork @relation(fields: [projectNetworkId], references: [id], onDelete: Cascade)

  projectIssues ProjectIssue[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([projectComponentId])
  @@index([projectNetworkId])
}

model AssemblyGroup {
  id          String  @id @default(uuid())
  name        String
  description String? @db.Text

  projectId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  assemblyProcesses AssemblyProcess[]
  projectNetworks   ProjectNetwork[]
  projectComponents ProjectComponent[]

  workingHours  WorkingHours[]
  projectIssues ProjectIssue[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([projectId])
}

model AssemblyProcess {
  id          String  @id @default(uuid())
  processId   String
  name        String
  description String? @db.Text
  order       Int     @default(0)

  projectComponents ProjectComponent[]
  sequences         Sequence[]

  assemblyGroupId String
  assemblyGroup   AssemblyGroup @relation(fields: [assemblyGroupId], references: [id], onDelete: Cascade)

  workingHours  WorkingHours[]
  projectIssues ProjectIssue[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([assemblyGroupId])
}
